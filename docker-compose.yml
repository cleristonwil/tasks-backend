version: "3"
services:
  db:
## Nome do Banco
    container_name: pg-prod
## Imagem a ser baixada do docker hub
    image: postgres:9.6
## Criando uma rede própria do Banco para se comunicar apenas com o backend
    networks:
      - prod_net_back
## Passando as variáveis de ambiente do banco passando a senha e o nome do banco
    environment:
      - POSTGRES_PASSWORD=passwd
      - POSTGRES_DB=tasks
## Mapeando dos volumes para não perder as informações
    volumes:
      - prod_postgresql:/var/lib/postgresql
      - prod_postgresql_data:/var/lib/postgresql/data

## Nome do backend
  backend:
    container_name: backend-prod
## Imagem a ser baixada do Backend com versionamento utilizando a variavel do Jenkins
    image: back_prod:build_${BUILD_NUMBER}
## Passando dados para Build, ensinando o Docker compose como criar uma imagem
    build:
## Vai ser executado na raiz
      context: .
## Caminho onde se encontra os arquivos .war do back
      args:
        - WAR_FILE=target/tasks-backend.war
        - CONTEXT=tasks-backend
## Rede para comunicar o back com o front
    networks:
      - prod_net_back
      - prod_net_front
    #ports:
    #  - 9998:8080
## Variaveis do Back com o acesso ao Banco e a porta ao qual eles vão se comunicar
## Internamente
    environment:
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWD=passwd
      #- DATABASE_UPDATE=none
## Depende que o banco esteja no ar se não ele quebra
    depends_on:
      - db

## Serviço do Frontend com o nome dele
  frontend:
    container_name: frontend-prod
## Imagem a ser baixada do Frontend com versionamento utilizando a variavel do Jenkins
    image: front_prod:build_${BUILD_NUMBER}
## Está executando no mesmo nível do Dockerfile '.'
    build:
        context: .
# Caminho onde se encontra os arquivos .war do front
        args:
          - WAR_FILE=frontend/target/tasks.war
          - CONTEXT=tasks
# ele vai apenas se comunicar com o Back, e a rede do front.
    networks:
      - prod_net_front
    ports:
      - 9999:8080
## Variaveis do front com o acesso do Backend e a porta ao qual
## eles vão se comunicar internamente com a versão da aplicação
    environment:
      - BACKEND_HOST=backend
      - BACKEND_PORT=8080
      - APP_VERSION=build_${BUILD_NUMBER}
    #depends_on:
    #  - backend

## Redes a que serão criadas no Docker
networks:
  prod_net_front:
  prod_net_back:

## Volumes Declarados para serem criadas
volumes:
  prod_postgresql:
  prod_postgresql_data: